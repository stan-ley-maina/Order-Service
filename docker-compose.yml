services:
  postgres:
    image: postgres:latest
    container_name: postgres-container3
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: order-db
    ports:
      - "5434:5432"  # Expose PostgreSQL on host port 5434
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.5.0
    container_name: broker
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT, PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8085:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8086:8080"
    depends_on:
      - broker
      - schema-registry
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: brokers:29092
      DYNAMIC_CONFIG_ENABLED: 'true'





  #spring-boot-app:
    #image:  service-image4 # Replace with your Spring Boot app Docker image
    #container_name: spring-boot-container
    #environment:
      #SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/order-db
      #SPRING_DATASOURCE_USERNAME: postgres
      #SPRING_DATASOURCE_PASSWORD: password
    #depends_on:
      #- postgres  # Ensure PostgreSQL is started before Spring Boot app
    #networks:
      #- app-network
    #ports:
   #   - "8087:8080"  # Expose Spring Boot app on host port 8080


networks:
  app-network:
    driver: bridge
